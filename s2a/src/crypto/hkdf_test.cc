/*
 *
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include "src/crypto/hkdf.h"

#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include "src/test_util/s2a_test_util.h"

namespace s2a {
namespace hkdf {
namespace {

using ::absl::Status;
using ::absl::StatusCode;
using ::s2a::test_util::StatusIs;

constexpr size_t kSha256DigestSize = 32;
constexpr size_t kSha384DigestSize = 48;

void HkdfVerifyOutput(HashFunction hash_function,
                      const std::vector<uint8_t>& info,
                      const std::vector<uint8_t>& prk,
                      const std::vector<uint8_t>& correct_output) {
  std::vector<uint8_t> output(correct_output.size(), 0);
  EXPECT_THAT(HkdfDeriveSecret(hash_function, prk, info, output),
              StatusIs(StatusCode::kOk));
  EXPECT_EQ(output, correct_output);
}

TEST(S2AHkdfTest, InvalidHashFunction) {
  std::vector<uint8_t> out;
  EXPECT_THAT(
      HkdfDeriveSecret(static_cast<HashFunction>(2), std::vector<uint8_t>{},
                       std::vector<uint8_t>{}, out),
      StatusIs(StatusCode::kInvalidArgument,
               "|hash_function| is not supported."));
}

TEST(S2AHkdfTest, PrkTooSmallToUseSha256) {
  std::vector<uint8_t> out;
  std::vector<uint8_t> prk(kSha256DigestSize - 1);
  EXPECT_THAT(HkdfDeriveSecret(HashFunction::SHA256_hash_function, prk,
                               std::vector<uint8_t>{}, out),
              StatusIs(StatusCode::kInvalidArgument,
                       "The size of |prk| must be at least the digest size of "
                       "|hash_function|."));
}

TEST(S2AHkdfTest, PrkTooSmallToUseSha384) {
  std::vector<uint8_t> out;
  std::vector<uint8_t> prk(kSha384DigestSize - 1);
  EXPECT_THAT(HkdfDeriveSecret(HashFunction::SHA384_hash_function, prk,
                               std::vector<uint8_t>{}, out),
              StatusIs(StatusCode::kInvalidArgument,
                       "The size of |prk| must be at least the digest size of "
                       "|hash_function|."));
}

TEST(S2AHkdfTest, TooManyBlocks) {
  std::vector<uint8_t> out(256 * kSha256DigestSize);
  EXPECT_THAT(HkdfDeriveSecret(HashFunction::SHA256_hash_function,
                               std::vector<uint8_t>(kSha256DigestSize),
                               std::vector<uint8_t>{}, out),
              StatusIs(StatusCode::kInternal, "Extracting too many bytes."));
}

// TODO(matthewstevenson88) Add Wycheproof test vectors for HKDF.
TEST(S2AHkdfTest, DeriveSecret) {
  /** This test data is taken from https://tools.ietf.org/html/rfc5869
   *  in Appendix A. **/
  const struct {
    std::string description;
    HashFunction hash_function;
    std::vector<uint8_t> info;
    std::vector<uint8_t> prk;
    std::vector<uint8_t> correct_output;
  } tests[] = {
      {
          "RFC 5869 test vector 1",
          HashFunction::SHA256_hash_function,
          {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9},
          {0x07, 0x77, 0x09, 0x36, 0x2c, 0x2e, 0x32, 0xdf, 0x0d, 0xdc, 0x3f,
           0x0d, 0xc4, 0x7b, 0xba, 0x63, 0x90, 0xb6, 0xc7, 0x3b, 0xb5, 0x0f,
           0x9c, 0x31, 0x22, 0xec, 0x84, 0x4a, 0xd7, 0xc2, 0xb3, 0xe5},
          {0x3c, 0xb2, 0x5f, 0x25, 0xfa, 0xac, 0xd5, 0x7a, 0x90, 0x43, 0x4f,
           0x64, 0xd0, 0x36, 0x2f, 0x2a, 0x2d, 0x2d, 0x0a, 0x90, 0xcf, 0x1a,
           0x5a, 0x4c, 0x5d, 0xb0, 0x2d, 0x56, 0xec, 0xc4, 0xc5, 0xbf, 0x34,
           0x00, 0x72, 0x08, 0xd5, 0xb8, 0x87, 0x18, 0x58, 0x65},
      },
      {"RFC 5869 test vector 2",
       HashFunction::SHA256_hash_function,
       {0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb,
        0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
        0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3,
        0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
        0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb,
        0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
        0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff},
       {0x06, 0xa6, 0xb8, 0x8c, 0x58, 0x53, 0x36, 0x1a, 0x06, 0x10, 0x4c,
        0x9c, 0xeb, 0x35, 0xb4, 0x5c, 0xef, 0x76, 0x00, 0x14, 0x90, 0x46,
        0x71, 0x01, 0x4a, 0x19, 0x3f, 0x40, 0xc1, 0x5f, 0xc2, 0x44},
       {0xb1, 0x1e, 0x39, 0x8d, 0xc8, 0x03, 0x27, 0xa1, 0xc8, 0xe7, 0xf7, 0x8c,
        0x59, 0x6a, 0x49, 0x34, 0x4f, 0x01, 0x2e, 0xda, 0x2d, 0x4e, 0xfa, 0xd8,
        0xa0, 0x50, 0xcc, 0x4c, 0x19, 0xaf, 0xa9, 0x7c, 0x59, 0x04, 0x5a, 0x99,
        0xca, 0xc7, 0x82, 0x72, 0x71, 0xcb, 0x41, 0xc6, 0x5e, 0x59, 0x0e, 0x09,
        0xda, 0x32, 0x75, 0x60, 0x0c, 0x2f, 0x09, 0xb8, 0x36, 0x77, 0x93, 0xa9,
        0xac, 0xa3, 0xdb, 0x71, 0xcc, 0x30, 0xc5, 0x81, 0x79, 0xec, 0x3e, 0x87,
        0xc1, 0x4c, 0x01, 0xd5, 0xc1, 0xf3, 0x43, 0x4f, 0x1d, 0x87}},
      {"RFC 5869 test vector 3",
       HashFunction::SHA256_hash_function,
       {},
       {0x19, 0xef, 0x24, 0xa3, 0x2c, 0x71, 0x7b, 0x16, 0x7f, 0x33, 0xa9,
        0x1d, 0x6f, 0x64, 0x8b, 0xdf, 0x96, 0x59, 0x67, 0x76, 0xaf, 0xdb,
        0x63, 0x77, 0xac, 0x43, 0x4c, 0x1c, 0x29, 0x3c, 0xcb, 0x04},
       {0x8d, 0xa4, 0xe7, 0x75, 0xa5, 0x63, 0xc1, 0x8f, 0x71, 0x5f, 0x80,
        0x2a, 0x06, 0x3c, 0x5a, 0x31, 0xb8, 0xa1, 0x1f, 0x5c, 0x5e, 0xe1,
        0x87, 0x9e, 0xc3, 0x45, 0x4e, 0x5f, 0x3c, 0x73, 0x8d, 0x2d, 0x9d,
        0x20, 0x13, 0x95, 0xfa, 0xa4, 0xb6, 0x1a, 0x96, 0xc8}},
  };
  for (size_t i = 0; i < sizeof(tests) / sizeof(*tests); i++) {
    HkdfVerifyOutput(tests[i].hash_function, tests[i].info, tests[i].prk,
                     tests[i].correct_output);
  }
}

}  // namespace
}  // namespace hkdf
}  // namespace s2a
